// <auto-generated />
using System;
using ManagingUserNotes.API.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagingUserNotes.API.Migrations
{
    [DbContext(typeof(DbContextManagingUserNotes))]
    [Migration("20231117131153_ok")]
    partial class ok
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.25");

            modelBuilder.Entity("ManagingUserNotes.API.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateModified")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is First Note",
                            DateCreated = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5356),
                            DateModified = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5356),
                            Published = true,
                            UserId = 1,
                            Views = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is Second Note",
                            DateCreated = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5359),
                            DateModified = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5359),
                            Published = true,
                            UserId = 2,
                            Views = 0
                        },
                        new
                        {
                            Id = 3,
                            Content = "This is Third Note",
                            DateCreated = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5361),
                            DateModified = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5362),
                            Published = true,
                            UserId = 1,
                            Views = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "Test",
                            DateCreated = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5364),
                            DateModified = new DateTime(2023, 11, 17, 16, 41, 53, 657, DateTimeKind.Local).AddTicks(5365),
                            Published = true,
                            UserId = 1,
                            Views = 0
                        });
                });

            modelBuilder.Entity("ManagingUserNotes.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 22,
                            Email = "taremiam@gmail.com",
                            FirstName = "Mahdi",
                            LastName = "Taremi",
                            Website = "www.mahditaremi.ir"
                        },
                        new
                        {
                            Id = 2,
                            Age = 28,
                            Email = "Test@gmail.com",
                            FirstName = "Sajjad",
                            LastName = "Taremi",
                            Website = "www.Test.ir"
                        },
                        new
                        {
                            Id = 3,
                            Age = 32,
                            Email = "Test2@gmail.com",
                            FirstName = "Amir",
                            LastName = "Taremi",
                            Website = "www.Test.ir"
                        });
                });

            modelBuilder.Entity("ManagingUserNotes.API.Entities.Note", b =>
                {
                    b.HasOne("ManagingUserNotes.API.Entities.User", "User")
                        .WithMany("Note")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ManagingUserNotes.API.Entities.User", b =>
                {
                    b.Navigation("Note");
                });
#pragma warning restore 612, 618
        }
    }
}
